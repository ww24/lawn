name: test-and-build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: lawn
  IMAGE_TAG: latest

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/setup-go@v2
        with:
          go-version: "~1.15.6"
      - name: Test
        run: go test -v -race ./...

  docker_build:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Lint
        run: |
          docker run -v $(pwd):/working --rm hadolint/hadolint \
          hadolint /working/Dockerfile \
          --ignore DL3018
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          outputs: type=docker
          tags: "${{ env.IMAGE_NAME }}:${{ github.sha }}"
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          exit-code: "1"
          severity: CRITICAL,HIGH
          format: template
          template: "@/contrib/sarif.tpl"
          output: trivy-results.sarif
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif

  docker_push:
    if: github.event_name == 'push'
    needs: [lint, test, docker_build]
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  terraform:
    name: Terraform
    defaults:
      run:
        working-directory: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.3
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Fmt
        run: terraform fmt -check
      - name: Init
        run: terraform init
      - name: Validate
        run: terraform validate -no-color
      - name: Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
      - name: Apply
        if: github.event_name == 'push'
        run: terraform apply -no-color
